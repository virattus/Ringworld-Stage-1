[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://cv2aa5pmq8ton"]

[ext_resource type="Texture2D" uid="uid://ckt826vjn2t30" path="res://effects/AfterimageOrb/Orb.png" id="1_cgkrb"]

[sub_resource type="Shader" id="Shader_13u8l"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx, unshaded, ambient_light_disabled, fog_disabled;

uniform sampler2D texture_albedo : source_color, filter_nearest, repeat_disable;
uniform float grow : hint_range(-16.0, 16.0, 0.001);
uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.001);
uniform float point_size : hint_range(0.1, 128.0, 0.1);

void vertex() 
{
	// Billboard Mode: Enabled
	MODELVIEW_MATRIX = VIEW_MATRIX * mat4(
			MAIN_CAM_INV_VIEW_MATRIX[0],
			MAIN_CAM_INV_VIEW_MATRIX[1],
			MAIN_CAM_INV_VIEW_MATRIX[2],
			MODEL_MATRIX[3]);

	// Billboard Keep Scale: Enabled
	MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(
			vec4(length(MODEL_MATRIX[0].xyz), 0.0, 0.0, 0.0),
			vec4(0.0, length(MODEL_MATRIX[1].xyz), 0.0, 0.0),
			vec4(0.0, 0.0, length(MODEL_MATRIX[2].xyz), 0.0),
			vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_NORMAL_MATRIX = mat3(MODELVIEW_MATRIX);

	// Grow: Enabled
	VERTEX += NORMAL * grow;
}

void fragment() 
{
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = COLOR.rgb * albedo_tex.rgb;


	if(((int(FRAGCOORD.x) >> 2) % 2 == 0) == ((int(FRAGCOORD.y) >> 2) % 2 != 0))
		discard;

	
	ALPHA *= COLOR.a * albedo_tex.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_13u8l")
shader_parameter/grow = 0.0
shader_parameter/alpha_scissor_threshold = 0.5
shader_parameter/point_size = 1.0
shader_parameter/texture_albedo = ExtResource("1_cgkrb")
